name: cola.Model
stereotype: class
label: cola的视图模型对象

methods:
  - name: get
    type: any
    label: 从Model中读取一个数据项
    description: |
      当一个数据项的值是懒装载的，那么在我们通过get()方法尝试从此数据项中读取内容时，Cola会利用loadMode参数的值来确定要如何来装载尚未装载的数据。
    arguments:
      - name: name
        type: string
        label: 数据项名或路径
      - name: loadMode
        type: string | function | Object
        defaultValue: async
        optional: true
        label: 懒加载属性的装载模式，默认值为async。
        description: |
          该装载模式目前有四种可能的取值：
          <ul>
            <li>async - 异步装载模式</li>
            <li>sync - 同步装载模式</li>
            <li>never - 不装载</li>
            <li>
            传入一个回调方法或一个回调对象，相当于按照异步模式装载，同时定义了该异步操作的回调方法或回调对象。
            回调对象的定义请参考: <a href="/docs/definitions">回调对象</a>
            </li>
          </ul>

  - name: set
    type: cola.Model
    label: 向Model中设置一个数据项
    arguments:
      - name: name
        type: string
        label: 数据项名或路径
      - name: value
        type: any
        label: 数据

  - name: set
    type: cola.Model
    label: 向Model中设置一批数据项
    arguments:
      - name: data
        type: JSON
        label: 以JSON方式定义的一批数据项

  - name: describe
    type: cola.Model
    label: 描述Model中的一个数据项
    decription: |
      我们可以把描述一个数据项的过程看做是定义一个DataType中的Property，事实上Cola内部的实现机制也就是这样的。
      所以此方法第二种参数可传递的JSON配置对象其实也就是一个Property的配置对象。
      参考：<a href="cola.Property.html">cola.Property</a>。
    arguments:
      - name: name
        type: string
        label: 数据项名，此处不支持数据路径
      - name: config
        type: json
        label: 以JSON形式定义的

  - name: describe
    type: cola.Model
    label: 定义Model中的一个数据项的数据类型
    decription: |
      当我们直接向此方法的第二个参数传递一个字符串时，Cola会将此字符串理解成DataType的name，并将找到的DataType设置为该Property的数据类型。
    arguments:
      - name: name
        type: string
        label: 数据项名，此处不支持数据路径
      - name: dataType
        type: string
        label: DataType的name

  - name: definition
    type: cola.Definition
    label: 根据名称获得一个数据描述对象的实例
    decription: |
      参考：<a href="cola.Definition.html#name">cola.Definition的name属性</a>。
    arguments:
      - name: name
        type: string
        label: 数据描述对象的名称

  - name: disableObservers
    type: cola.Entity
    label: 将禁止Entity向观察者发送消息
    description: |
      此方法最常见的使用场景是在将要对数据进行批量的操作之前，先调用 disableObservers() 禁止消息发送。
      这样界面就无法得到数据被改变的通知，也就不会随着操作进行大量重复而无意义的重渲染。
      当批量的操作完成之后，再调用 enableObservers() 重新允许消息发送。
      此时也可以调用 notifyObservers() 方法通知所有观察者进行重渲染。
      需要注意的是 disableObservers() 和 enableObservers() 内部是使用计数器来管理的，
      这意味着当你连续调用了两次 disableObservers() 之后，必须也要调用两次 enableObservers() 才能冲洗恢复消息发送。

  - name: enableObservers
    type: cola.Entity
    label: 允许Entity向观察者发送消息
    description: 参考 <a href="#method:disableObservers">disableObservers()</a>

  - name: notifyObservers
    type: cola.Entity
    label: 通知观察者数据已更改
    description: 参考 <a href="#method:disableObservers">disableObservers()</a>

  - name: action
    type: cola.Model
    label: 声明一个Action
    description: |
      Action其实就是一个Function，将Function声明为一个Action的目的是为了供dom模板来调用。

      定义Action其实还有一个更加简单的方法，例如下面的两段代码作用是相同的：
      <code>
      model.action("showMessage", function() {
        ... ...
      });
      </code>
      和
      <code>
      model.action.showMessage = function() {
        ... ...
      };
      </code>
    arguments:
      - name: name
        type: string
        label: Action的name
      - name: action
        type: function
        label: Action方法

  - name: action
    type: cola.Model
    label: 声明一组Action
    description: |
      例如:
      <code>
      model.action({
        showMessage: function() {
          ... ...
        },
        buyNow: function() {
          ... ...
        }
      });
      </code>
    arguments:
      - name: config
        type: json
        label: 以JSON方法定义的一组Action方法

  - name: action
    type: function
    label: 根据名称查找一个Action
    description: |
      此方法不仅可用于查找本Model中的Action，当某个名称的Action在本Model中无法找到时Cola会进一步到父Model中查找。
    arguments:
      - name: name
        type: string
        label: Action的name